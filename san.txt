# Resetting the sources, targets, values, and label lists
sources = []
targets = []
values = []

# First, ensure all unique labels are added to label_list
for i in range(len(df_names)):
    current_hri_col = f"{df_names[i]}_HRI"
    unique_hris = merged_outer[current_hri_col].unique()
    
    for hri in unique_hris:
        label = f"{df_names[i]}_{hri}"
        if label not in label_list:
            label_list.append(label)

# Now, iterate over rows of merged_outer to capture all transitions
for _, row in merged_outer.iterrows():
    for i in range(len(df_names) - 1):  # Exclude the last dataframe
        current_hri_col = f"{df_names[i]}_HRI"
        next_hri_col = f"{df_names[i+1]}_HRI"
        
        current_label = f"{df_names[i]}_{row[current_hri_col]}"
        next_label = f"{df_names[i+1]}_{row[next_hri_col]}"
        
        src_idx = label_list.index(current_label)
        tgt_idx = label_list.index(next_label)
        
        # Check if this transition already exists in sources and targets
        if src_idx in sources:
            idx = sources.index(src_idx)
            if targets[idx] == tgt_idx:
                values[idx] += 1  # Increment the value for this transition
                continue
        
        # If transition does not exist, add it to sources, targets, and values
        sources.append(src_idx)
        targets.append(tgt_idx)
        values.append(1)

# Plotting the Sankey diagram
fig = go.Figure(data=[go.Sankey(
    node=dict(
        pad=15,
        thickness=20,
        line=dict(color="black", width=0.5),
        label=label_list
    ),
    link=dict(
        source=sources,
        target=targets,
        value=values,
    )
)])

fig.update_layout(title_text="Transitions between HRIs across DataFrames", font_size=10)
fig.show()


# changed

# Resetting the sources, targets, values, and label lists
sources = []
targets = []
values = []

# First, ensure all unique labels are added to label_list
for i in range(len(df_names)):
    current_hri_col = f"{df_names[i]}_HRI"
    unique_hris = merged_outer[current_hri_col].unique()
    
    for hri in unique_hris:
        label = f"{df_names[i]}_{hri}"
        if label not in label_list:
            label_list.append(label)

# Now, iterate over rows of merged_outer to capture changed transitions
for _, row in merged_outer.iterrows():
    for i in range(len(df_names) - 1):  # Exclude the last dataframe
        current_hri_col = f"{df_names[i]}_HRI"
        next_hri_col = f"{df_names[i+1]}_HRI"
        
        # Skip transitions that don't represent a change
        if row[current_hri_col] == row[next_hri_col]:
            continue
        
        current_label = f"{df_names[i]}_{row[current_hri_col]}"
        next_label = f"{df_names[i+1]}_{row[next_hri_col]}"
        
        src_idx = label_list.index(current_label)
        tgt_idx = label_list.index(next_label)
        
        # Check if this transition already exists in sources and targets
        if src_idx in sources:
            idx = sources.index(src_idx)
            if targets[idx] == tgt_idx:
                values[idx] += 1  # Increment the value for this transition
                continue
        
        # If transition does not exist, add it to sources, targets, and values
        sources.append(src_idx)
        targets.append(tgt_idx)
        values.append(1)

# Plotting the Sankey diagram
fig = go.Figure(data=[go.Sankey(
    node=dict(
        pad=15,
        thickness=20,
        line=dict(color="black", width=0.5),
        label=label_list
    ),
    link=dict(
        source=sources,
        target=targets,
        value=values,
    )
)])

fig.update_layout(title_text="Changed Transitions between HRIs across DataFrames", font_size=10)
fig.show()


########## sorted

# Construct the label_list with sorted HRI values for each dataframe, ensuring NaN labels are added
label_list = []
for df_name in df_names:
    unique_hris = [hri for hri in merged_outer[f"{df_name}_HRI"].unique() if pd.notna(hri)]
    unique_hris = sorted(unique_hris)
    for hri in unique_hris:
        label_list.append(f"{df_name}_{hri}")
    
    # Ensure a NaN label is added for every dataframe
    if f"{df_name}_nan" not in label_list:
        label_list.append(f"{df_name}_nan")

# Resetting the sources, targets, and values lists
sources = []
targets = []
values = []

# Iterate over rows of merged_outer to capture changed transitions
for _, row in merged_outer.iterrows():
    for i in range(len(df_names) - 1):  # Exclude the last dataframe
        current_hri_col = f"{df_names[i]}_HRI"
        next_hri_col = f"{df_names[i+1]}_HRI"
        
        # Skip transitions that don't represent a change
        if row[current_hri_col] == row[next_hri_col]:
            continue
        
        current_label = f"{df_names[i]}_{row[current_hri_col]}" if pd.notna(row[current_hri_col]) else f"{df_names[i]}_nan"
        next_label = f"{df_names[i+1]}_{row[next_hri_col]}" if pd.notna(row[next_hri_col]) else f"{df_names[i+1]}_nan"
        
        src_idx = label_list.index(current_label)
        tgt_idx = label_list.index(next_label)
        
        if src_idx in sources and targets[sources.index(src_idx)] == tgt_idx:
            values[sources.index(src_idx)] += 1
        else:
            sources.append(src_idx)
            targets.append(tgt_idx)
            values.append(1)

# Plotting the Sankey diagram
fig = go.Figure(data=[go.Sankey(
    node=dict(
        pad=15,
        thickness=20,
        line=dict(color="black", width=0.5),
        label=label_list
    ),
    link=dict(
        source=sources,
        target=targets,
        value=values,
    )
)])

# Update the height of the figure
fig.update_layout(title_text="Changed Transitions between HRIs across DataFrames", font_size=10, height=800)

fig.show()



####### sorted 2
import numpy as np
# Construct the label_list with consistently sorted HRI values across all dataframes
all_hris = sorted(set(merged_outer.replace({np.nan: "nan"}).astype(str).values.flatten()))

label_list = []
for df_name in df_names:
    for hri in all_hris:
        label_list.append(f"{df_name}_{hri}")

# Resetting the sources, targets, and values lists
sources = []
targets = []
values = []

# Iterate over rows of merged_outer to capture changed transitions
for _, row in merged_outer.iterrows():
    for i in range(len(df_names) - 1):  # Exclude the last dataframe
        current_hri_col = f"{df_names[i]}_HRI"
        next_hri_col = f"{df_names[i+1]}_HRI"
        
        # Skip transitions that don't represent a change
        if row[current_hri_col] == row[next_hri_col]:
            continue
        
        current_label = f"{df_names[i]}_{row[current_hri_col]}" if pd.notna(row[current_hri_col]) else f"{df_names[i]}_nan"
        next_label = f"{df_names[i+1]}_{row[next_hri_col]}" if pd.notna(row[next_hri_col]) else f"{df_names[i+1]}_nan"
        
        src_idx = label_list.index(current_label)
        tgt_idx = label_list.index(next_label)
        
        if src_idx in sources and targets[sources.index(src_idx)] == tgt_idx:
            values[sources.index(src_idx)] += 1
        else:
            sources.append(src_idx)
            targets.append(tgt_idx)
            values.append(1)

# Plotting the Sankey diagram
fig = go.Figure(data=[go.Sankey(
    node=dict(
        pad=15,
        thickness=20,
        line=dict(color="black", width=0.5),
        label=label_list
    ),
    link=dict(
        source=sources,
        target=targets,
        value=values,
    )
)])

# Update the height of the figure
fig.update_layout(title_text="Changed Transitions between HRIs across DataFrames", font_size=10, height=800)

fig.show()


